<form action="#" id="availability-grid-form">
    <!-- <p id="howto" class="a11y-hidden">Tab to the next time slot or use arrow keys navigate the days and&nbsp;times. Hold shift and click another input to toggle ranges.</p> -->
    <table id="availability-grid" class="availability-grid">
        <!-- <caption>Enter your Weekly Availability by Hour</caption> -->
        <thead>
            <tr>
                <th data-dow="sun" data-index="0">Sun<span class="a11y-hidden">day</span></th>
                <th data-dow="mon" data-index="1">Mon<span class="a11y-hidden">day</span></th>
                <th data-dow="tue" data-index="2">Tues<span class="a11y-hidden">day</span></th>
                <th data-dow="wed" data-index="3">Wed<span class="a11y-hidden">nesday</span></th>
                <th data-dow="thur" data-index="4">Thur<span class="a11y-hidden">sday</span></th>
                <th data-dow="fri" data-index="5">Fri<span class="a11y-hidden">day</span></th>
                <th data-dow="sat" data-index="6">Sat<span class="a11y-hidden">urday</span></th>
            </tr>
        </thead>
        <tbody>
            <tr data-time="0">
                <td data-dow="6" data-index="0"><label for="avail-sun-day" id="avail-sun-day-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Sundays at &lt;time&gt;day&lt;/time&gt;."
                            data-unchecked-time="Are you available Sundays at &lt;time&gt;day&lt;/time&gt;?">Are you
                            available Sundays at <time>day</time>?</span></label>
                    <input type="checkbox" name="avail-sun-day" id="avail-sun-day"
                        aria-describedby="avail-sun-day-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="0" data-index="1"><label for="avail-mon-day" id="avail-mon-day-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Mondays at &lt;time&gt;day&lt;/time&gt;."
                            data-unchecked-time="Are you available Mondays at &lt;time&gt;day&lt;/time&gt;?">Are you
                            available Mondays at <time>day</time>?</span></label>
                    <input type="checkbox" name="avail-mon-day" id="avail-mon-day"
                        aria-describedby="avail-mon-day-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="1" data-index="2"><label for="avail-tue-day" id="avail-tue-day-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Tuesdays at &lt;time&gt;day&lt;/time&gt;."
                            data-unchecked-time="Are you available Tuesdays at &lt;time&gt;day&lt;/time&gt;?">Are you
                            available Tuesdays at <time>day</time>?</span></label>
                    <input type="checkbox" name="avail-tue-day" id="avail-tue-day"
                        aria-describedby="avail-tue-day-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="2" data-index="3"><label for="avail-wed-day" id="avail-wed-day-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Wednesdays at &lt;time&gt;day&lt;/time&gt;."
                            data-unchecked-time="Are you available Wednesdays at &lt;time&gt;day&lt;/time&gt;?">Are you
                            available Wednesdays at <time>day</time>?</span></label>
                    <input type="checkbox" name="avail-wed-day" id="avail-wed-day"
                        aria-describedby="avail-wed-day-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="3" data-index="4"><label for="avail-thur-day" id="avail-thur-day-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Thursdays at &lt;time&gt;day&lt;/time&gt;."
                            data-unchecked-time="Are you available Thursdays at &lt;time&gt;day&lt;/time&gt;?">Are you
                            available Thursdays at <time>day</time>?</span></label>
                    <input type="checkbox" name="avail-thur-day" id="avail-thur-day"
                        aria-describedby="avail-thur-day-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="4" data-index="5"><label for="avail-fri-day" id="avail-fri-day-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Fridays at &lt;time&gt;day&lt;/time&gt;."
                            data-unchecked-time="Are you available Fridays at &lt;time&gt;day&lt;/time&gt;?">Are you
                            available Fridays at <time>day</time>?</span></label>
                    <input type="checkbox" name="avail-fri-day" id="avail-fri-day"
                        aria-describedby="avail-fri-day-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="5" data-index="6"><label for="avail-sat-day" id="avail-sat-day-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Saturdays at &lt;time&gt;day&lt;/time&gt;."
                            data-unchecked-time="Are you available Saturdays at &lt;time&gt;day&lt;/time&gt;?">Are you
                            available Saturdays at <time>day</time>?</span></label>
                    <input type="checkbox" name="avail-sat-day" id="avail-sat-day"
                        aria-describedby="avail-sat-day-label howto">
                    <div>
                    </div>
                </td>
            </tr>
            <tr data-time="1" class="">
                <td data-dow="6" data-index="0"><label for="avail-sun-night" id="avail-sun-night-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Sundays at &lt;time&gt;night&lt;/time&gt;."
                            data-unchecked-time="Are you available Sundays at &lt;time&gt;night&lt;/time&gt;?">Are you
                            available Sundays at <time>night</time>?</span></label>
                    <input type="checkbox" name="avail-sun-night" id="avail-sun-night"
                        aria-describedby="avail-sun-night-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="0" data-index="1"><label for="avail-mon-night" id="avail-mon-night-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Mondays at &lt;time&gt;night&lt;/time&gt;."
                            data-unchecked-time="Are you available Mondays at &lt;time&gt;night&lt;/time&gt;?">Are you
                            available Mondays at <time>night</time>?</span></label>
                    <input type="checkbox" name="avail-mon-night" id="avail-mon-night"
                        aria-describedby="avail-mon-night-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="1" class="" data-index="2"><label for="avail-tue-night" id="avail-tue-night-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Tuesdays at &lt;time&gt;night&lt;/time&gt;."
                            data-unchecked-time="Are you available Tuesdays at &lt;time&gt;night&lt;/time&gt;?">Are you
                            available Tuesdays at <time>night</time>.</span></label>
                    <input type="checkbox" name="avail-tue-night" id="avail-tue-night"
                        aria-describedby="avail-tue-night-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="2" class="" data-index="3"><label for="avail-wed-night" id="avail-wed-night-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Wednesdays at &lt;time&gt;night&lt;/time&gt;."
                            data-unchecked-time="Are you available Wednesdays at &lt;time&gt;night&lt;/time&gt;?">Are
                            you available Wednesdays at <time>night</time>?</span></label>
                    <input type="checkbox" name="avail-wed-night" id="avail-wed-night"
                        aria-describedby="avail-wed-night-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="3" class="" data-index="4"><label for="avail-thur-night" id="avail-thur-night-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Thursdays at &lt;time&gt;night&lt;/time&gt;."
                            data-unchecked-time="Are you available Thursdays at &lt;time&gt;night&lt;/time&gt;?">Are you
                            available Thursdays at <time>night</time>?</span></label>
                    <input type="checkbox" name="avail-thur-night" id="avail-thur-night"
                        aria-describedby="avail-thur-night-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="4" data-index="5"><label for="avail-fri-night" id="avail-fri-night-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Fridays at &lt;time&gt;night&lt;/time&gt;."
                            data-unchecked-time="Are you available Fridays at &lt;time&gt;night&lt;/time&gt;?">Are you
                            available Fridays at <time>night</time>?</span></label>
                    <input type="checkbox" name="avail-fri-night" id="avail-fri-night"
                        aria-describedby="avail-fri-night-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="5" data-index="6"><label for="avail-sat-night" id="avail-sat-night-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Saturdays at &lt;time&gt;night&lt;/time&gt;."
                            data-unchecked-time="Are you available Saturdays at &lt;time&gt;night&lt;/time&gt;?">Are you
                            available Saturdays at <time>night</time>?</span></label>
                    <input type="checkbox" name="avail-sat-night" id="avail-sat-night"
                        aria-describedby="avail-sat-night-label howto">
                    <div>
                    </div>
                </td>
            </tr>
            <tr data-time="2">
                <td data-dow="6" data-index="0"><label for="avail-sun-anytime" id="avail-sun-anytime-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Sundays at &lt;time&gt;anytime&lt;/time&gt;."
                            data-unchecked-time="Are you available Sundays at &lt;time&gt;anytime&lt;/time&gt;?">Are you
                            available Sundays at <time>anytime</time>?</span></label>
                    <input type="checkbox" name="avail-sun-anytime" id="avail-sun-anytime"
                        aria-describedby="avail-sun-anytime-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="0" data-index="1"><label for="avail-mon-anytime" id="avail-mon-anytime-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Mondays at &lt;time&gt;anytime&lt;/time&gt;."
                            data-unchecked-time="Are you available Mondays at &lt;time&gt;anytime&lt;/time&gt;?">Are you
                            available Mondays at <time>anytime</time>?</span></label>
                    <input type="checkbox" name="avail-mon-anytime" id="avail-mon-anytime"
                        aria-describedby="avail-mon-anytime-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="1" data-index="2"><label for="avail-tue-anytime" id="avail-tue-anytime-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Tuesdays at &lt;time&gt;anytime&lt;/time&gt;."
                            data-unchecked-time="Are you available Tuesdays at &lt;time&gt;anytime&lt;/time&gt;?">Are
                            you available Tuesdays at <time>anytime</time>?</span></label>
                    <input type="checkbox" name="avail-tue-anytime" id="avail-tue-anytime"
                        aria-describedby="avail-tue-anytime-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="2" data-index="3"><label for="avail-wed-anytime" id="avail-wed-anytime-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Wednesdays at &lt;time&gt;anytime&lt;/time&gt;."
                            data-unchecked-time="Are you available Wednesdays at &lt;time&gt;anytime&lt;/time&gt;?">Are
                            you available Wednesdays at <time>anytime</time>?</span></label>
                    <input type="checkbox" name="avail-wed-anytime" id="avail-wed-anytime"
                        aria-describedby="avail-wed-anytime-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="3" data-index="4"><label for="avail-thur-anytime" id="avail-thur-anytime-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Thursdays at &lt;time&gt;anytime&lt;/time&gt;."
                            data-unchecked-time="Are you available Thursdays at &lt;time&gt;anytime&lt;/time&gt;?">Are
                            you available Thursdays at <time>anytime</time>?</span></label>
                    <input type="checkbox" name="avail-thur-anytime" id="avail-thur-anytime"
                        aria-describedby="avail-thur-anytime-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="4" data-index="5"><label for="avail-fri-anytime" id="avail-fri-anytime-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Fridays at &lt;time&gt;anytime&lt;/time&gt;."
                            data-unchecked-time="Are you available Fridays at &lt;time&gt;anytime&lt;/time&gt;?">Are you
                            available Fridays at <time>anytime</time>?</span></label>
                    <input type="checkbox" name="avail-fri-anytime" id="avail-fri-anytime"
                        aria-describedby="avail-fri-anytime-label howto">
                    <div>
                    </div>
                </td>
                <td data-dow="5" data-index="6"><label for="avail-sat-anytime" id="avail-sat-anytime-label"><span
                            class="a11y-hidden"
                            data-checked-time="You are available Saturdays at &lt;time&gt;anytime&lt;/time&gt;."
                            data-unchecked-time="Are you available Saturdays at &lt;time&gt;anytime&lt;/time&gt;?">Are
                            you available Saturdays at <time>anytime</time>?</span></label>
                    <input type="checkbox" name="avail-sat-anytime" id="avail-sat-anytime"
                        aria-describedby="avail-sat-anytime-label howto">
                    <div>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</form>
<script type="text/javascript">
    (function webpackUniversalModuleDefinition(root, factory) {
        if (typeof exports === 'object' && typeof module === 'object')
            module.exports = factory();
        else if (typeof define === 'function' && define.amd)
            define([], factory);
        else {
            var a = factory();
            for (var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
        }
    })(this, function () {
        return /******/ (function (modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if (installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
                    /******/
};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
                /******/
}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
            /******/
})
/************************************************************************/
/******/([
/* 0 */
/***/ function (module, exports, __webpack_require__) {

                module.exports = __webpack_require__(1);


                /***/
},
/* 1 */
/***/ function (module, exports, __webpack_require__) {

                'use strict';

                var getClosest = __webpack_require__(2).getClosest;
                var getSiblings = __webpack_require__(3).getSiblings;
                var serializeArray = __webpack_require__(4);
                var index = __webpack_require__(5);

                var AvailabilityGrid = function AvailabilityGrid(_opts) {
                    this.opts = Object.assign({}, {
                        element: 'availability-grid',
                        inputSelector: 'input[type="checkbox"]',
                        whenTextSelector: 'span.a11y-hidden'
                    }, _opts);

                    this.lastFocusedInput = null;
                    this.shiftKeyDown = false;

                    this.init();
                };

                AvailabilityGrid.prototype.init = function (_opts) {
                    this.opts = Object.assign({}, this.opts, _opts);

                    var that = this;

                    this.keyCoords = { x: 0, y: 0 };
                    this.entity = typeof this.opts.element == "string" ? document.getElementById(this.opts.element) : this.opts.element;

                    this.addListeners();

                    try {
                        this._doInputFocus(this.entity.querySelector('tbody input:focus'));
                    } catch (e) { }
                };

                AvailabilityGrid.prototype.destroy = function () {
                    this.removeListeners();

                    try {
                        // if fired back up with .init() without a new element passed in, AvailabilityGrid will try and find the previous element by id
                        this.entity = this.entity.getAttribute('id');
                    } catch (e) {
                        this.entity = undefined;
                    }
                };

                AvailabilityGrid.prototype.inverse = function () {
                    var inputs = this.entity.querySelectorAll('tbody input[type="checkbox"]');
                    for (var i = 0; i < inputs.length; i++) {
                        var input = inputs[i];
                        input.checked = !input.checked;
                    }
                };

                AvailabilityGrid.prototype.addListeners = function () {
                    this.addKeyboardListeners();
                    this.addInputListeners();
                };

                AvailabilityGrid.prototype.removeListeners = function () {
                    this.removeKeyboardListeners();
                    this.removeInputListeners();
                };

                AvailabilityGrid.prototype.addKeyboardListeners = function () {
                    this.entity.addEventListener("keydown", this.handleKeyPress.bind(this), false);
                    this.entity.addEventListener("keyup", this.handleKeyUp.bind(this), false);
                };

                AvailabilityGrid.prototype.removeKeyboardListeners = function () {
                    this.entity.removeEventListener("keydown", this.handleKeyPress.bind(this), false);
                    this.entity.removeEventListener("keyup", this.handleKeyUp.bind(this), false);
                };

                AvailabilityGrid.prototype.addInputListeners = function () {
                    var inputs = this.entity.querySelectorAll(this.opts.inputSelector);

                    for (var i = 0; i < inputs.length; i++) {
                        var input = inputs[i];

                        input.addEventListener('change', this.handleInputChange.bind(this));
                        input.addEventListener('focus', this.handleInputFocus.bind(this));
                    }
                };

                AvailabilityGrid.prototype.handleInputChange = function (event) {
                    var label = getSiblings(event.target)[0],
                        span = label.querySelector(this.opts.whenTextSelector);

                    event.target.focus();

                    span.innerHTML = event.target.checked ? span.innerHTML = span.getAttribute('data-checked-time') : span.innerHTML = span.getAttribute('data-unchecked-time');
                };

                AvailabilityGrid.prototype.removeInputListeners = function () {
                    var inputs = this.entity.querySelectorAll(this.opts.inputSelector);

                    for (var i = 0; i < inputs.length; i++) {
                        var input = inputs[i];
                        input.removeEventListener('change', this.handleInputChange.bind(this));
                        input.removeEventListener('focus', this.handleInputFocus.bind(this));
                    }
                };

                AvailabilityGrid.prototype._doInputFocus = function (input) {
                    var td = getClosest(input, 'td'),
                        tr = getClosest(input, 'tr'),
                        tbody = getClosest(tr, 'tbody'),
                        trIndex = index(tr),
                        time = tr.getAttribute('data-time'),
                        that = this,
                        dow = index(td);

                    if (that.shiftKeyDown) {
                        // check/uncheck multiple "matrix" style
                        (function () {
                            var lastFocusedInput = document.querySelector('input[name="' + that.lastFocusedInput + '"]'),
                                lastTd = getClosest(lastFocusedInput, 'td'),
                                lastTr = getClosest(lastFocusedInput, 'tr'),
                                lastTrIndex = index(lastTr),
                                colsToSelect = uniq([index(lastTd), index(td)]).sort(numCompare),
                                rowsToSelect = uniq([index(lastTr), index(tr)]).sort(numCompare),
                                doCheck = input.checked;

                            for (var c = colsToSelect[0]; c <= colsToSelect[colsToSelect.length - 1]; c++) {
                                for (var r = rowsToSelect[0]; r <= rowsToSelect[rowsToSelect.length - 1]; r++) {
                                    try {
                                        tbody.querySelector('tr[data-time="' + r + '"]').querySelector('td[data-index="' + c + '"]').querySelector('input[type="checkbox"]').checked = doCheck;
                                    } catch (e) { }
                                }
                            }

                            function uniq(a) {
                                return Array.from(new Set(a));
                            }

                            function numCompare(a, b) {
                                if (a === b) return 0;
                                return a > b ? 1 : -1;
                            }
                        })();
                    }

                    this.keyCoords.x = index(td);
                    this.keyCoords.y = parseInt(time);

                    removeSelectedClasses();

                    tr.classList.add('selected');
                    td.classList.add('selected');

                    this.lastFocusedInput = input.getAttribute('name');

                    function removeSelectedClasses() {
                        var selecteds = document.querySelectorAll('.selected');
                        for (var i = 0; i < selecteds.length; i++) {
                            selecteds[i].classList.remove('selected');
                        }
                    }
                };

                AvailabilityGrid.prototype.handleInputFocus = function (event) {
                    this._doInputFocus(event.target);
                };

                AvailabilityGrid.prototype.handleKeyPress = function (event) {
                    var that = this;
                    var availGrid = this.entity;
                    var rows = availGrid.querySelectorAll('tbody tr');
                    var numCols = rows[0].querySelectorAll('td').length;

                    switch (event.which) {
                        case 16:
                            // event.shiftKey
                            that.shiftKeyDown = true;
                            break;

                        case 38:
                            // up
                            event.preventDefault();
                            that.keyCoords.y = Math.max(0, that.keyCoords.y - 1);
                            focusTD();
                            break;

                        case 39:
                            // right
                            event.preventDefault();
                            that.keyCoords.x = Math.min(numCols - 1, that.keyCoords.x + 1);
                            focusTD();
                            break;

                        case 40:
                            // down
                            event.preventDefault();
                            that.keyCoords.y = Math.min(rows.length - 1, that.keyCoords.y + 1);
                            focusTD();
                            break;

                        case 37:
                            // left
                            event.preventDefault();
                            that.keyCoords.x = Math.max(0, that.keyCoords.x - 1);
                            focusTD();
                            break;
                    }

                    function focusTD() {
                        var tr = availGrid.querySelector('tbody tr[data-time="' + that.keyCoords.y + '"]'),
                            td = tr.querySelector('td[data-index="' + that.keyCoords.x + '"]');

                        td.querySelector('input').focus();
                    }
                };

                AvailabilityGrid.prototype.handleKeyUp = function (event) {
                    if (event.which == 16) this.shiftKeyDown = false;
                };

                module.exports = {
                    AvailabilityGrid: AvailabilityGrid
                };

                /***/
},
/* 2 */
/***/ function (module, exports) {

                'use strict';

                /**
                 * Get the closest matching element up the DOM tree.
                 * @param  {Element} elem     Starting element
                 * @param  {String}  selector Selector to match against (class, ID, data attribute, or tag)
                 * @return {Boolean|Element}  Returns null if not match found
                 */
                var getClosest = function getClosest(elem, selector) {

                    // Variables
                    var firstChar = selector.charAt(0);
                    var supports = 'classList' in document.documentElement;
                    var attribute, value;

                    // If selector is a data attribute, split attribute from value
                    if (firstChar === '[') {
                        selector = selector.substr(1, selector.length - 2);
                        attribute = selector.split('=');

                        if (attribute.length > 1) {
                            value = true;
                            attribute[1] = attribute[1].replace(/"/g, '').replace(/'/g, '');
                        }
                    }

                    // Get closest match
                    for (; elem && elem !== document && elem.nodeType === 1; elem = elem.parentNode) {

                        // If selector is a class
                        if (firstChar === '.') {
                            if (supports) {
                                if (elem.classList.contains(selector.substr(1))) {
                                    return elem;
                                }
                            } else {
                                if (new RegExp('(^|\\s)' + selector.substr(1) + '(\\s|$)').test(elem.className)) {
                                    return elem;
                                }
                            }
                        }

                        // If selector is an ID
                        if (firstChar === '#') {
                            if (elem.id === selector.substr(1)) {
                                return elem;
                            }
                        }

                        // If selector is a data attribute
                        if (firstChar === '[') {
                            if (elem.hasAttribute(attribute[0])) {
                                if (value) {
                                    if (elem.getAttribute(attribute[0]) === attribute[1]) {
                                        return elem;
                                    }
                                } else {
                                    return elem;
                                }
                            }
                        }

                        // If selector is a tag
                        if (elem.tagName.toLowerCase() === selector) {
                            return elem;
                        }
                    }

                    return null;
                };

                exports.getClosest = getClosest;

                /***/
},
/* 3 */
/***/ function (module, exports) {

                "use strict";

                var getSiblings = function getSiblings(elem) {
                    // https://gomakethings.com/ditching-jquery/#get-sibling-elements
                    var siblings = [];
                    var sibling = elem.parentNode.firstChild;
                    for (; sibling; sibling = sibling.nextSibling) {
                        if (sibling.nodeType === 1 && sibling !== elem) {
                            siblings.push(sibling);
                        }
                    }
                    return siblings;
                };

                exports.getSiblings = getSiblings;

                /***/
},
/* 4 */
/***/ function (module, exports) {

                'use strict';

                var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

                function serializeArray(form) {
                    var field,
                        l,
                        s = [];
                    if ((typeof form === 'undefined' ? 'undefined' : _typeof(form)) == 'object' && form.nodeName == "FORM") {
                        var len = form.elements.length;
                        for (var i = 0; i < len; i++) {
                            field = form.elements[i];
                            if (field.name && !field.disabled && field.type != 'file' && field.type != 'reset' && field.type != 'submit' && field.type != 'button') {
                                if (field.type == 'select-multiple') {
                                    l = form.elements[i].options.length;
                                    for (j = 0; j < l; j++) {
                                        if (field.options[j].selected) s[s.length] = { name: field.name, value: field.options[j].value };
                                    }
                                } else if (field.type != 'checkbox' && field.type != 'radio' || field.checked) {
                                    s[s.length] = { name: field.name, value: field.value };
                                }
                            }
                        }
                    }
                    return s;
                }

                module.exports = serializeArray;

                /***/
},
/* 5 */
/***/ function (module, exports) {

                "use strict";

                function index(element) {
                    var sib = element.parentNode.childNodes;
                    var n = 0;
                    for (var i = 0; i < sib.length; i++) {
                        if (sib[i] == element) return n;
                        if (sib[i].nodeType == 1) n++;
                    }
                    return -1;
                }

                module.exports = index;

                /***/
}
/******/])
    });
    ;
</script>
<script defer>
    var grid;
    document.addEventListener('DOMContentLoaded', function () {
        grid = new AvailabilityGrid();
    });
</script>
<script defer>
    (function () {
        var btn = document.getElementById("inverse");
        btn.addEventListener("click", function (event) {
            event.preventDefault();
            grid.inverse();
        });
    })();
</script>
<script defer>
    (function () {
        var availGrid = document.getElementById('availability-grid-form');
        var availGridTable = availGrid.querySelector('.availability-grid');
        var militaryTime = document.getElementById('military-time');
        militaryTime.addEventListener('change', function (event) {
            if (event.target.checked) {
                availGridTable.setAttribute('data-military-time', '');
            } else {
                availGridTable.removeAttribute('data-military-time');
            }
        });
    })();
</script>
<script defer>
    (function () {
        var weekStarts = document.querySelectorAll('input[name="week_starts"]');
        for (var i = 0; i < weekStarts.length; i++) {
            weekStarts[i].addEventListener('change', function (event) {
                var ths = Array.prototype.slice.call(document.querySelectorAll('.availability-grid thead th')),
                    trs = Array.prototype.slice.call(document.querySelectorAll('.availability-grid tbody tr')),
                    sunFirst = event.target.value == 'sun';

                if (sunFirst) {
                    var s = '';
                    if (ths[0].getAttribute('data-dow') !== 'sun') {
                        ths.unshift(ths.pop()); // pop sunday off the end and add it back at the beginning

                        trs.map(function (tr) {
                            var tds = getTDs(tr);
                            tds.unshift(tds.pop());
                            reappendChildrenInOrder(tr, tds);
                        });
                    }
                } else {
                    if (ths[0].getAttribute('data-dow') !== 'mon') {
                        ths.push(ths.shift());

                        trs.map(function (tr) {
                            var tds = getTDs(tr);
                            tds.push(tds.shift());
                            reappendChildrenInOrder(tr, tds);
                        });
                    }
                }

                reappendChildrenInOrder(document.querySelector('.availability-grid thead tr'), ths);

                function getTDs(tr) {
                    return Array.prototype.slice.call(tr.querySelectorAll('td'));
                }

                function reappendChildrenInOrder(parent, elems) {
                    parent.innerHTML = '';
                    var s = '';
                    var i = 0;
                    elems.map(function (elem) {
                        elem.setAttribute('data-index', i);
                        parent.appendChild(elem);
                        i++;
                    });
                    return parent;
                }
            });
        }
    })();
</script>